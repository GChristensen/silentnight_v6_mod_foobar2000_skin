// ==PREPROCESSOR==
// @import "%fb2k_path%scripts\marc2003\v2\common.js"
// @import "%fb2k_path%scripts\marc2003\v2\tooltip_buttons.js"
// @name "Playcount Sync"
// @author "marc2003"
// ==/PREPROCESSOR==

var bw = 32;
var bh = 32;
var top_margin = 0;
var left_margin = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var panel_id = window.GetProperty("panel_id", window.id);
var custom_background_file = settings_path + panel_id + "buttons_background";
var custom_background = read(custom_background_file);
var username_file = settings_path + "username";
var username = read(username_file);
var api_key_file = settings_path + "api_key";
var api_key = read(api_key_file);
var sql_file = data_folder + "test.sql";
var batch_file = "\"" + script_path + "\lastfm_sql.cmd\" \"" + script_path +"\" \"" + fb.ProfilePath + "customdb_sqlite.db\" \"" + sql_file + "\"";
var working = 0;

window.GetProperty("auto_correct", true);
window.GetProperty("debug", false);

on_item_focus_change();
if(fb.IsPlaying) on_playback_new_track();

function on_notify_data(name, data) {
	if(name == "lastfm_update" && data == 1) {
		username = read(username_file);
		api_key = read(api_key_file);
		on_metadb_changed();
	}
}

function on_metadb_changed() {
	if(!g_metadb) return;
	artist = fb.TitleFormat("%artist%").EvalWithMetadb(g_metadb);
	track = fb.TitleFormat("%title%").EvalWithMetadb(g_metadb);
	old_userloved = fb.TitleFormat("%LASTFM_LOVED_DB%").EvalWithMetadb(g_metadb)  == 1 ? 1 : 0;
	old_userplaycount = fb.TitleFormat("%LASTFM_PLAYCOUNT_DB%").EvalWithMetadb(g_metadb);
	command = "Last.fm " + (old_userloved == 1 ? "Unlove" : "Love") + " '" + track + "' by '"+ artist + "'";
	crc32 = fb.TitleFormat("$crc32($lower(%artist%%title%))").EvalWithMetadb(g_metadb);
	switch(true) {
		case (username.length == 0):
		case (api_key.length != 32):
			n = "exclamation.png";
			h = "exclamation.png";
			tooltip = "Please use the context menu to set your Last.fm username and API KEY.";
			func = null;
			break;
		case (!utils.CheckComponent("foo_softplaylists", true)):
			n = "exclamation.png";
			h = "exclamation.png";
			tooltip = "The foo_softplaylists component is required to love tracks.";
			func = null;
			break;
		default:
			n = old_userloved == 1 ? "love_h.png" : "love.png";
			h = old_userloved == 1 ? "love.png" : "love_h.png";
			tooltip = command;
			func = function() {lfm_track();}
			break;
	}
	Buttons = {
		but: new Button(left_margin,top_margin, bw, bh, {normal: images_path + n, hover: images_path + h}, func, tooltip)
	};
	window.Repaint();
}

function on_playback_new_track() {
	time_elapsed = 0;
	switch(true) {
		case (fb.PlaybackLength == 0):
			target_time = 240;
			break;
		case (fb.PlaybackLength >= 30):
			target_time = Math.min(Math.floor(fb.PlaybackLength / 2),240);
			break;
		default:
			target_time = 5;
	}
	on_item_focus_change();
}

function on_playback_time(time) {
	time_elapsed++;
	if(time_elapsed == target_time) sync();
}

function lfm_track() {
	fb.RunContextCommandWithMetadb(command, g_metadb);
	sync();
}

function sync() {
	if(username.length == 0 || api_key.length != 32) return(fb.trace("Playcount sync: Can't contact Last.fm. Check your username / API KEY settings."));
	if(working == 1) return;
	fb.trace("Playcount sync: Contacting Last.fm....");
	lastfm("&method=track.getinfo&artist=" + encodeURIComponent(artist) + "&track=" + encodeURIComponent(track) + "&autocorrect=" + (window.GetProperty("auto_correct") ? 1 : 0), "foo_playcount_sync", function() {process();});
}

function process() {
	fb.trace("Playcount sync: Last.fm responded 'OK'");
	if(window.GetProperty("debug")) fb.trace(xmlhttp.responsetext);
	xmlDoc = xmlhttp.responseXML;
	try { userplaycount = ++xmlDoc.getElementsByTagName("userplaycount")[0].childNodes[0].nodeValue; } catch(e) { userplaycount = fb.PlaybackLength < 30 ? 0 : 1;}
	try { userloved = xmlDoc.getElementsByTagName("userloved")[0].childNodes[0].nodeValue; } catch(e) { userloved = 0; }
	if(fb.IsPlaying && time_elapsed >= target_time) {
		if(old_userplaycount != userplaycount) {
			fb.RunContextCommandWithMetadb("Customdb Delete Playcount", g_metadb);
			if(userplaycount > 0) {
				if(old_userloved == 1) fb.RunContextCommandWithMetadb("Customdb Love 0", g_metadb);
				var attempt = 0;
				while(fb.TitleFormat("%LASTFM_PLAYCOUNT_DB%").EvalWithMetadb(g_metadb) != userplaycount && attempt <=3) {
					var query1 = '\"INSERT INTO quicktag(url,subsong,fieldname,value) VALUES(\\"' + crc32 + '\\",\\"-1\\",\\"LASTFM_PLAYCOUNT_DB\\",\\"' + userplaycount + '\\")\";';
					WshShell.Run("\"" + script_path + "\sqlite3.exe\" \"" + fb.ProfilePath + "\\\"customdb_sqlite.db " + query1, 0, true);
					attempt++;
				}
				fb.RunContextCommandWithMetadb("Customdb Refresh", g_metadb);
			}
		} else {
			fb.trace("Playcount sync: Playcount not updated. No changes found.");
		}
	}
	if(old_userloved != userloved) fb.RunContextCommandWithMetadb("Customdb Love " + userloved, g_metadb);
}

function sync_library_loved(p) {
	page = p;
	lastfm("&method=user.getlovedtracks&limit=200&user=" + username + "&page=" + page, "foo_playcount_sync", function() {process_library_loved();});
}

function process_library_loved() {
	working = 1;
	xmlDoc = xmlhttp.responseXML;
	try {
		var tracks = xmlDoc.getElementsByTagName("lovedtracks")[0];
		if(page == 1) pages = tracks.getAttribute("totalPages");
		for(i = 0; i < tracks.childNodes.length; i++) {
			var data = new Array();
			var track = tracks.childNodes[i];
			for(j = 0; j < track.childNodes.length; j++) {
				if(track.childNodes[j].tagName == "artist") data[0] = track.childNodes[j].childNodes[0].childNodes[0].nodeValue;
				if(track.childNodes[j].tagName == "name") data[1] = track.childNodes[j].childNodes[0].nodeValue;
			}
			data[2] = 1;
			if(data.length == 3) {
				fb.trace(r + ": " + data[0] + " - " + data[1] + " " + data[2]);
				url = fb.TitleFormat("$crc32($lower(" + tf(data[0]) + tf(data[1]) + "))").EvalWithMetadb(g_metadb);
				sql += 'INSERT OR REPLACE INTO quicktag(url,subsong,fieldname,value) VALUES("' + url + '","-1","LASTFM_LOVED_DB","' + data[2] + '");' + "\n";
				r++;
			}
		}
		fb.trace("Completed page " + page + " of " + pages + " (loved tracks)");
	} catch(e) {
		fb.ShowPopupMessage("Could not download page " + page);
	}
	if(page < pages) {
		page++;
		sync_library_loved(page);
	} else {
		pages = 1;
		r = 1;
		sync_library_playcount(1);
	}
}

function sync_library_playcount(p) {
	page = p;
	lastfm("&method=library.gettracks&user=" + username + "&page=" + page, "foo_playcount_sync", function() {process_library_playcount();});
}

function process_library_playcount() {
	working = 1;
	xmlDoc = xmlhttp.responseXML;
	try {
		var tracks = xmlDoc.getElementsByTagName("tracks")[0];
		if(page == 1) pages = tracks.getAttribute("totalPages");
		for(i = 0; i < tracks.childNodes.length; i++) {
			var data = new Array();
			var track = tracks.childNodes[i];
			for(j = 0; j < track.childNodes.length; j++) {
				if(track.childNodes[j].tagName == "artist") data[0] = track.childNodes[j].childNodes[0].childNodes[0].nodeValue;
				if(track.childNodes[j].tagName == "name") data[1] = track.childNodes[j].childNodes[0].nodeValue;
				if(track.childNodes[j].tagName == "playcount") data[2] = track.childNodes[j].childNodes[0].nodeValue;
			}
			if(data.length == 3) {
				fb.trace(r + ": " + data[0] + " - " + data[1] + " " + data[2]);
				url = fb.TitleFormat("$crc32($lower(" + tf(data[0]) + tf(data[1]) + "))").EvalWithMetadb(g_metadb);
				sql += 'INSERT OR REPLACE INTO quicktag(url,subsong,fieldname,value) VALUES("' + url + '","-1","LASTFM_PLAYCOUNT_DB","' + data[2] + '");' + "\n";
				r++;
			}
		}
		fb.trace("Completed page " + page + " of " + pages + " (playcount)");
	} catch(e) {
		fb.ShowPopupMessage("Could not download page " + page);
	}
	if(page < pages) {
		page++;
		sync_library_playcount(page);
	} else {
		try {
			sql += "COMMIT;"
			ts = fso.OpenTextFile(sql_file, 2, true, 0);
			ts.WriteLine(sql);
			ts.close();
			try {
				WshShell.Run(batch_file);
			} catch (e) {
			}
			working = 0;
		} catch(e) {
		}
	}
}

function on_size() {
	ww = window.Width;
	wh = window.Height;
}

function on_mouse_rbtn_up(x, y) {
	var _menu = window.CreatePopupMenu();
	var _li = window.CreatePopupMenu();
	var _au = window.CreatePopupMenu();
	var _child = window.CreatePopupMenu();
	var idx;
	_li.AppendMenuItem(g_metadb && username.length > 0 && api_key.length == 32 ? MF_STRING : MF_GRAYED, 4, "Create and import SQL file");
	_li.AppendMenuItem(fso.FileExists(sql_file) ? MF_STRING : MF_GRAYED, 5, "Import SQL file");
	_menu.AppendMenuItem(MF_STRING | MF_POPUP, _li.ID, "Library import");
	_au.AppendMenuItem(MF_STRING, 6, "Use spelling correction");
	_au.CheckMenuItem(6, window.GetProperty("auto_correct"));
	_au.AppendMenuItem(MF_STRING, 7, "Show debug info");
	_au.CheckMenuItem(7, window.GetProperty("debug"));
	_menu.AppendMenuItem(MF_STRING | MF_POPUP, _au.ID, "Auto-updates");
	_child.AppendMenuItem(MF_STRING, 101, "None");
	_child.AppendMenuItem(MF_STRING, 102, (dui ? "Default UI " : "Columns UI ") + "default");
	_child.AppendMenuItem(MF_STRING, 103, "Splitter");
	_child.AppendMenuItem(MF_STRING, 104, "Custom ");
	_child.AppendMenuItem(MF_SEPARATOR, 0, 0);
	_child.AppendMenuItem(window.GetProperty("mode") == 104 ? MF_STRING : MF_GRAYED, 105, "Set custom colour...");
	_child.CheckMenuRadioItem(101, 104, window.GetProperty("mode", 101));
	_menu.AppendMenuItem(MF_SEPARATOR, 0, 0);
	_menu.AppendMenuItem(MF_STRING, 2, "Set your Last.fm username...");
	_menu.AppendMenuItem(MF_STRING, 3, "Set your API KEY...");
	_menu.AppendMenuItem(MF_SEPARATOR, 0, 0);
	_menu.AppendMenuItem(username.length > 0 ? MF_STRING : MF_GRAYED, 1, "Visit your Last.fm user profile page");
	_menu.AppendMenuItem(MF_SEPARATOR, 0, 0);
	_menu.AppendMenuItem(MF_STRING | MF_POPUP, _child.ID, "Background");
	_menu.AppendMenuItem(MF_SEPARATOR, 0, 0);
	if(utils.IsKeyPressed(0x10)) _menu.AppendMenuItem(MF_STRING, 9, "Properties");
	_menu.AppendMenuItem(MF_STRING, 10, "Configure...");
	idx = _menu.TrackPopupMenu(x, y);
	switch(idx) {
		case 1:
			try {
				WshShell.run("http://www.last.fm/user/" + encodeURIComponent(username));
			} catch(e) {
				fb.ShowPopupMessage("Unable to launch your default browser.", "Playcount Sync");
			}
			break;
		case 2: 
			username = text_input_box("Playcount Sync", "Please enter your Last.fm username", username_file);
			on_metadb_changed();
			window.NotifyOthers("lastfm_update", 1);
			break;
		case 3:
			api_key = text_input_box("Playcount Sync", "Please enter your Last.fm API KEY\n\nhttp://www.last.fm/api/account", api_key_file);
			on_metadb_changed();
			window.NotifyOthers("lastfm_update", 1);
			break;
		case 4:
			pages = 1;
			r = 1;
			sql = "BEGIN TRANSACTION;\n";
			sync_library_loved(1);
			break;
		case 5:
			try {
				WshShell.Run(batch_file);
			} catch(e) {
			}
			break;
		case 6:
			window.SetProperty("auto_correct", !window.GetProperty("auto_correct"));
			break;
		case 7:
			window.SetProperty("debug", !window.GetProperty("debug"));
			break;
		case 101:
		case 102:
		case 103:
		case 104:
			window.SetProperty("mode", idx);
			window.Repaint();
			break;
		case 105:
			custom_background = text_input_box("Playcount Sync", "Enter a custom colour for the background. Uses RGB. Example usage:\n\n234-211-74", custom_background_file);
			window.Repaint();
			break;
		case 9:
			window.ShowProperties();
			break;
		case 10:
			window.ShowConfigure();
			break;
	}
	_menu.Dispose();
	_li.Dispose();
	_au.Dispose();
	_child.Dispose();
	return true;
}

function on_paint(gr) {
	buttons_background(gr);
	buttonsDraw(gr);
}